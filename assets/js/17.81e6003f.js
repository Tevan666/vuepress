(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{387:function(t,a,s){"use strict";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[t._v("#")]),t._v(" 正则表达式")]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("p",[t._v("​\t"),s("strong",[t._v("正则表达式")]),t._v("，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132",target:"_blank",rel:"noopener noreferrer"}},[t._v("计算机科学"),s("OutboundLink")],1),t._v("的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。")]),t._v(" "),s("h2",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("p",[t._v("​\t几乎所有 Microsoft 开发者和所有.NET语言都可以使用正则表达式。在主流操作系统（*nix[Linux, Unix等]、Windows、HP、BeOS等）、主流的开发语言（"),s("a",{attrs:{href:"https://baike.baidu.com/item/delphi/140081",target:"_blank",rel:"noopener noreferrer"}},[t._v("delphi"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/Scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scala"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/PHP",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/C%23",target:"_blank",rel:"noopener noreferrer"}},[t._v("C#"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/Java/85979",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/C%2B%2B",target:"_blank",rel:"noopener noreferrer"}},[t._v("C++"),s("OutboundLink")],1),t._v("、Objective-c、"),s("a",{attrs:{href:"https://baike.baidu.com/item/Swift/14080957",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swift"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/VB/6044",target:"_blank",rel:"noopener noreferrer"}},[t._v("VB"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/Javascript/321142",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://baike.baidu.com/item/Ruby",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ruby"),s("OutboundLink")],1),t._v("以及"),s("a",{attrs:{href:"https://baike.baidu.com/item/Python",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python"),s("OutboundLink")],1),t._v("等）、数以亿万计的各种应用软件中，都可以看到正则表达式。")]),t._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("灵活性、逻辑性和功能性非常强；")])]),t._v(" "),s("li",[s("p",[t._v("可以迅速地用极简单的方式达到字符串的复杂控制。")])]),t._v(" "),s("li",[s("p",[t._v("对于刚接触的人来说，比较晦涩难懂。")])])]),t._v(" "),s("p",[t._v("由于正则表达式主要"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%AF%B9%E8%B1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("应用对象"),s("OutboundLink")],1),t._v("是文本，因此它在各种"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("文本编辑器"),s("OutboundLink")],1),t._v("场合都有应用，小到著名编辑器"),s("a",{attrs:{href:"https://baike.baidu.com/item/EditPlus/3739427",target:"_blank",rel:"noopener noreferrer"}},[t._v("EditPlus"),s("OutboundLink")],1),t._v("，大到Microsoft Word、[Visual Studio](https://baike.baidu.com/item/Visual Studio/539453)等大型编辑器，都可以使用正则表达式来处理文本内容。")]),t._v(" "),s("h2",{attrs:{id:"符号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号"}},[t._v("#")]),t._v(" 符号")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("\\")]),t._v(" "),s("th",[t._v("将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\\n”匹配\\n。“\\n”匹配换行符。序列“\\”匹配“\\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("^")]),t._v(" "),s("td",[t._v("匹配输入字行首。如果设置了RegExp对象的Multiline属性，^也匹配“\\n”或“\\r”之后的位置。")])]),t._v(" "),s("tr",[s("td",[t._v("$")]),t._v(" "),s("td",[t._v("匹配输入行尾。如果设置了RegExp对象的Multiline属性，$也匹配“\\n”或“\\r”之前的位置。")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("匹配前面的子表达式任意次。例如，zo**能匹配“z”，也能匹配“zo”以及“zoo”。*等价于{0,}。")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。")])]),t._v(" "),s("tr",[s("td",[t._v("{"),s("em",[t._v("n")]),t._v("}")]),t._v(" "),s("td",[s("em",[t._v("n")]),t._v("是一个非负整数。匹配确定的"),s("em",[t._v("n")]),t._v("次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。")])]),t._v(" "),s("tr",[s("td",[t._v("{"),s("em",[t._v("n")]),t._v(",}")]),t._v(" "),s("td",[s("em",[t._v("n")]),t._v("是一个非负整数。至少匹配"),s("em",[t._v("n")]),t._v("次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。")])]),t._v(" "),s("tr",[s("td",[t._v("{"),s("em",[t._v("n")]),t._v(","),s("em",[t._v("m")]),t._v("}")]),t._v(" "),s("td",[s("em",[t._v("m")]),t._v("和"),s("em",[t._v("n")]),t._v("均为非负整数，其中"),s("em",[t._v("n")]),t._v("<="),s("em",[t._v("m")]),t._v("。最少匹配"),s("em",[t._v("n")]),t._v("次且最多匹配"),s("em",[t._v("m")]),t._v("次。例如，“o{1,3}”将匹配“fooooood”中的前三个o为一组，后三个o为一组。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("当该字符紧跟在任何一个其他限制符（*,+,?，{"),s("em",[t._v("n")]),t._v("}，{"),s("em",[t._v("n")]),t._v(",}，{"),s("em",[t._v("n")]),t._v(","),s("em",[t._v("m")]),t._v("}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少地匹配所搜索的字符串，而默认的贪婪模式则尽可能多地匹配所搜索的字符串。例如，对于字符串“oooo”，“o+”将尽可能多地匹配“o”，得到结果[“oooo”]，而“o+?”将尽可能少地匹配“o”，得到结果 ['o', 'o', 'o', 'o']")])]),t._v(" "),s("tr",[s("td",[t._v(".点")]),t._v(" "),s("td",[t._v('匹配除“\\n”和"\\r"之外的任何单个字符。要匹配包括“\\n”和"\\r"在内的任何字符，请使用像“[\\s\\S]”的模式。')])]),t._v(" "),s("tr",[s("td",[t._v("(pattern)")]),t._v(" "),s("td",[t._v("匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”。")])]),t._v(" "),s("tr",[s("td",[t._v("(?:pattern)")]),t._v(" "),s("td",[t._v("非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分时很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。")])]),t._v(" "),s("tr",[s("td",[t._v("(?=pattern)")]),t._v(" "),s("td",[t._v("非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。")])]),t._v(" "),s("tr",[s("td",[t._v("(?!pattern)")]),t._v(" "),s("td",[t._v("非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。")])]),t._v(" "),s("tr",[s("td",[t._v("(?<=pattern)")]),t._v(" "),s("td",[t._v("非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?<=95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。*python的正则表达式没有完全按照正则表达式规范实现，所以一些高级特性建议使用其他语言如java、scala等")])]),t._v(" "),s("tr",[s("td",[t._v("(?<!pattern)")]),t._v(" "),s("td",[t._v("非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?<!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。*python的正则表达式没有完全按照正则表达式规范实现，所以一些高级特性建议使用其他语言如java、scala等")])]),t._v(" "),s("tr",[s("td",[t._v("x|y")]),t._v(" "),s("td",[t._v("匹配x或y。例如，“z|food”能匹配“z”或“food”(此处请谨慎)。“[z|f]ood”则匹配“zood”或“food”。")])]),t._v(" "),s("tr",[s("td",[t._v("[xyz]")]),t._v(" "),s("td",[t._v("字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。")])]),t._v(" "),s("tr",[s("td",[t._v("[^xyz]")]),t._v(" "),s("td",[t._v("负值字符集合。匹配未包含的任意字符。例如，^abc可以匹配“plain”中的“plin”任一字符。")])]),t._v(" "),s("tr",[s("td",[t._v("[a-z]")]),t._v(" "),s("td",[t._v("字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.")])]),t._v(" "),s("tr",[s("td",[t._v("[^a-z]")]),t._v(" "),s("td",[t._v("负值字符范围。匹配任何不在指定范围内的任意字符。例如，^a-z可以匹配任何不在“a”到“z”范围内的任意字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配一个单词的边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\\b就是匹配位置的）。例如，“er\\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”；“\\b1_”可以匹配“1_23”中的“1_”，但不能匹配“21_3”中的“1_”。")])]),t._v(" "),s("tr",[s("td",[t._v("\\B")]),t._v(" "),s("td",[t._v("匹配非单词边界。“er\\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。")])]),t._v(" "),s("tr",[s("td",[t._v("\\cx")]),t._v(" "),s("td",[t._v("匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("匹配一个数字字符。等价于[0-9]。grep 要加上-P，perl正则支持")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("匹配一个非数字字符。等价于^0-9。grep要加上-P，perl正则支持")])]),t._v(" "),s("tr",[s("td",[t._v("\\f")]),t._v(" "),s("td",[t._v("匹配一个换页符。等价于\\x0c和\\cL。")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("匹配一个换行符。等价于\\x0a和\\cJ。")])]),t._v(" "),s("tr",[s("td",[t._v("\\r")]),t._v(" "),s("td",[t._v("匹配一个回车符。等价于\\x0d和\\cM。")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("匹配任何可见字符。等价于^ \\f\\n\\r\\t\\v。")])]),t._v(" "),s("tr",[s("td",[t._v("\\t")]),t._v(" "),s("td",[t._v("匹配一个制表符。等价于\\x09和\\cI。")])]),t._v(" "),s("tr",[s("td",[t._v("\\v")]),t._v(" "),s("td",[t._v("匹配一个垂直制表符。等价于\\x0b和\\cK。")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v('匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的"单词"字符使用Unicode字符集。')])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("匹配任何非单词字符。等价于“^A-Za-z0-9_”。")])]),t._v(" "),s("tr",[s("td",[t._v("\\x"),s("em",[t._v("n")])]),t._v(" "),s("td",[t._v("匹配"),s("em",[t._v("n")]),t._v("，其中"),s("em",[t._v("n")]),t._v("为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41”匹配“A”。“\\x041”则等价于“\\x04&1”。正则表达式中可以使用ASCII编码。")])]),t._v(" "),s("tr",[s("td",[t._v("\\num")]),t._v(" "),s("td",[t._v("匹配"),s("em",[t._v("num")]),t._v("，其中"),s("em",[t._v("num")]),t._v("是一个正整数。对所获取的匹配的引用。例如，“(.)\\1”匹配两个连续的相同字符。")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("标识一个八进制转义值或一个向后引用。如果*n"),s("em",[t._v("之前至少")]),t._v("n"),s("em",[t._v("个获取的子表达式，则")]),t._v("n"),s("em",[t._v("为向后引用。否则，如果")]),t._v("n"),s("em",[t._v("为八进制数字（0-7），则")]),t._v("n*为一个八进制转义值。")])]),t._v(" "),s("tr",[s("td",[t._v("\\nm")]),t._v(" "),s("td",[t._v("标识一个八进制转义值或一个向后引用。如果*nm"),s("em",[t._v("之前至少有")]),t._v("nm"),s("em",[t._v("个获得子表达式，则")]),t._v("nm"),s("em",[t._v("为向后引用。如果*nm")]),t._v("之前至少有"),s("em",[t._v("n")]),t._v("个获取，则"),s("em",[t._v("n")]),t._v("为一个后跟文字"),s("em",[t._v("m")]),t._v("的向后引用。如果前面的条件都不满足，若"),s("em",[t._v("n")]),t._v("和"),s("em",[t._v("m")]),t._v("均为八进制数字（0-7），则*nm"),s("em",[t._v("将匹配八进制转义值")]),t._v("nm*。")])]),t._v(" "),s("tr",[s("td",[t._v("*nml*")]),t._v(" "),s("td",[t._v("如果"),s("em",[t._v("n")]),t._v("为八进制数字（0-7），且"),s("em",[t._v("m")]),t._v("和"),s("em",[t._v("l")]),t._v("均为八进制数字（0-7），则匹配八进制转义值"),s("em",[t._v("nml")]),t._v("。")])]),t._v(" "),s("tr",[s("td",[t._v("\\u"),s("em",[t._v("n")])]),t._v(" "),s("td",[t._v("匹配"),s("em",[t._v("n")]),t._v("，其中"),s("em",[t._v("n")]),t._v("是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。")])]),t._v(" "),s("tr",[s("td",[t._v("\\p{P}")]),t._v(" "),s("td",[t._v("小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。其他六个属性：L：字母；M：标记符号（一般不会单独出现）；Z：分隔符（比如空格、换行等）；S：符号（比如数学符号、货币符号等）；N：数字（比如阿拉伯数字、罗马数字等）；C：其他字符。*"),s("em",[t._v("注：此语法部分语言不支持，例：javascript。")])])]),t._v(" "),s("tr",[s("td",[t._v("<>")]),t._v(" "),s("td",[t._v('匹配词（word）的开始（<）和结束（>）。例如正则表达式<the>能够匹配字符串"for the wise"中的"the"，但是不能匹配字符串"otherwise"中的"the"。注意：这个元字符不是所有的软件都支持的。')])]),t._v(" "),s("tr",[s("td",[t._v("( )")]),t._v(" "),s("td",[t._v("将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \\1 到\\9 的符号来引用。")])])])]),t._v(" "),s("h2",{attrs:{id:"支持情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持情况"}},[t._v("#")]),t._v(" 支持情况")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("命令或环境")])]),t._v(" "),s("th",[s("strong",[t._v(".")])]),t._v(" "),s("th",[s("strong",[t._v("[ ]")])]),t._v(" "),s("th",[s("strong",[t._v("^")])]),t._v(" "),s("th",[s("strong",[t._v("$")])]),t._v(" "),s("th",[s("strong",[t._v("\\( \\)")])]),t._v(" "),s("th",[s("strong",[t._v("\\{ \\}")])]),t._v(" "),s("th",[s("strong",[t._v("?")])]),t._v(" "),s("th",[s("strong",[t._v("+")])]),t._v(" "),s("th",[s("strong",[t._v("|")])]),t._v(" "),s("th",[s("strong",[t._v("( )")])])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("vi")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("Visual C++")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("awk")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("在命令行加入 --posix or --re-interval参数即可")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("python")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("java")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("javascript")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("php")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("strong",[t._v("C#")])]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")]),t._v(" "),s("td",[t._v("√")])])])]),t._v(" "),s("h2",{attrs:{id:"在javascript中使用正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在javascript中使用正则表达式"}},[t._v("#")]),t._v(" 在JavaScript中使用正则表达式")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\d{8-20}'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里的\\\\，第一个\\是转义符，用于转义。")]),t._v("\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11111111")]),t._v("a”"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面的例子还可以写成：")]),t._v(" "),s("p",[t._v("var reg = new RegExp(/\\d{8-20}/)")]),t._v(" "),s("p",[t._v("reg.test(“11111111a”)")]),t._v(" "),s("p",[s("strong",[t._v("test")]),t._v("可以测试字符串是否匹配正则表达是的规则，符合返回true 否则返回false")]),t._v(" "),s("p",[s("strong",[t._v("exec、match")]),t._v("用于捕获匹配的子串。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//找出这个字符串中的所有数字")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc123de45fgh6789qqq111'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法1")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findNum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cur "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" cur"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findNum")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["123", "45", "6789", "111"]')]),t._v("\n    \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法2 使用正则表达式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["123", "45", "6789", "111"]')]),t._v("\n")])])]),s("h2",{attrs:{id:"正则表达式的创建方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的创建方式"}},[t._v("#")]),t._v(" 正则表达式的创建方式")]),t._v(" "),s("p",[t._v("①字面量创建方式")]),t._v(" "),s("p",[t._v("var reg = /pattern/flags")]),t._v(" "),s("p",[t._v("②实例创建方式")]),t._v(" "),s("p",[t._v("var reg = new RegExp(pattern,flags);")]),t._v(" "),s("p",[t._v("☆pattern:正则表达式      flags:标识(修饰符)")]),t._v(" "),s("p",[s("strong",[t._v("字面量创建方式和构造函数创建方式的区别")])]),t._v(" "),s("ol",[s("li",[t._v("字面量创建方式不能进行字符串拼接，实例创建方式可以")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var regParam = 'cm';\nvar reg1 = new RegExp(regParam+'1');\nvar reg2 = /regParam/;\nconsole.log(reg1);  //   /cm1/\nconsole.log(reg2);  //  /regParam/\n")])])]),s("ol",[s("li",[t._v("字面量创建方式特殊含义的字符不需要转义，实例创建方式需要转义")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var reg1 = new RegExp('\\d');  //    /d/ \nvar reg2 = new RegExp('\\\\d')  //   /\\d/\nvar reg3 = /\\d/;              //  /\\d/\n")])])]),s("p",[t._v("标识主要包括：")]),t._v(" "),s("p",[t._v("1️⃣.i 忽略大小写匹配")]),t._v(" "),s("p",[t._v("2️⃣.m 多行匹配，即在到达一行文本末尾时还会继续寻常下一行中是否与正则匹配的项")]),t._v(" "),s("p",[t._v("3️⃣.g 全局匹配 模式应用于所有字符串，而非在找到第一个匹配项时停止")]),t._v(" "),s("p",[t._v("4️⃣.s  允许 "),s("code",[t._v(".")]),t._v(" 匹配换行符。")]),t._v(" "),s("p",[t._v("5️⃣.u  使用unicode码的模式进行匹配。")]),t._v(" "),s("p",[t._v("6️⃣.y  执行“粘性("),s("code",[t._v("sticky")]),t._v(")”搜索,匹配从目标字符串的当前位置开始。")]),t._v(" "),s("h2",{attrs:{id:"js中的元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中的元字符"}},[t._v("#")]),t._v(" JS中的元字符")]),t._v(" "),s("p",[t._v("代表特殊含义的元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("\\d")]),t._v(" "),s("th",[t._v("0-9之间的任意一个数字  \\d只占一个位置")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("数字，字母 ，下划线 0-9 a-z A-Z _")])]),t._v(" "),s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("空格或者空白等")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("除了\\d")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("除了\\w")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("除了\\s")])]),t._v(" "),s("tr",[s("td",[t._v(".")]),t._v(" "),s("td",[t._v("除了\\n之外的任意一个字符")])]),t._v(" "),s("tr",[s("td",[t._v("\\")]),t._v(" "),s("td",[t._v("转义字符")])]),t._v(" "),s("tr",[s("td",[t._v("|")]),t._v(" "),s("td",[t._v("或者")])]),t._v(" "),s("tr",[s("td",[t._v("()")]),t._v(" "),s("td",[t._v("分组")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("匹配换行符")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配边界 字符串的开头和结尾 空格的两边都是边界 => 不占用字符串位数")])]),t._v(" "),s("tr",[s("td",[t._v("^")]),t._v(" "),s("td",[t._v("限定开始位置 => 本身不占位置")])]),t._v(" "),s("tr",[s("td",[t._v("$")]),t._v(" "),s("td",[t._v("限定结束位置 => 本身不占位置")])]),t._v(" "),s("tr",[s("td",[t._v("[a-z]")]),t._v(" "),s("td",[t._v("任意字母 []中的表示任意一个都可以")])]),t._v(" "),s("tr",[s("td",[t._v("[^a-z]")]),t._v(" "),s("td",[t._v("非字母 []中^代表除了")])]),t._v(" "),s("tr",[s("td",[t._v("[abc]")]),t._v(" "),s("td",[t._v("abc三个字母中的任何一个 [^abc]除了这三个字母中的任何一个字符")])])])]),t._v(" "),s("p",[t._v("代表次数的量词元字符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("*")]),t._v(" "),s("th",[t._v("0到多个")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("1到多个")])]),t._v(" "),s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("0次或1次 可有可无")])]),t._v(" "),s("tr",[s("td",[t._v("{n}")]),t._v(" "),s("td",[t._v("正好n次；")])]),t._v(" "),s("tr",[s("td",[t._v("{n,}")]),t._v(" "),s("td",[t._v("n到多次")])]),t._v(" "),s("tr",[s("td",[t._v("{n,m}")]),t._v(" "),s("td",[t._v("n次到m次")])])])]),t._v(" "),s("p",[t._v("量词出现在元字符后面 如\\d+，限定出现在前面的元字符的次数")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1223334444'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d{2}")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//["12", "23", "33", "44", "44"]')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'   空格  '")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\s+|\\s+$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配开头结尾空格")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(空格)")]),t._v("\n")])])]),s("h2",{attrs:{id:"分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),s("p",[t._v("( ) 在正则中可以用于分组")]),t._v(" "),s("p",[t._v("被括号起来的部分是子表达式，当做一个分组")]),t._v(" "),s("h4",{attrs:{id:"分组编号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组编号"}},[t._v("#")]),t._v(" 分组编号")]),t._v(" "),s("p",[t._v("括号从左到右从1开始递增")]),t._v(" "),s("h4",{attrs:{id:"分组引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分组引用"}},[t._v("#")]),t._v(" 分组引用")]),t._v(" "),s("p",[t._v("知道分组编号后，我们会需要引用分组")]),t._v(" "),s("h4",{attrs:{id:"引用规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用规则"}},[t._v("#")]),t._v(" 引用规则")]),t._v(" "),s("p",[t._v("反斜扛 + 编号： \\number")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ABbBaAaBaBBaBa'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("([a-z])([A-Z])\\1")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相当于([a-z])([A-Z])([a-z])")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"不保存分组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不保存分组"}},[t._v("#")]),t._v(" 不保存分组")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("默认在()里面的表达式会保存成分组，但有些情况下，只想用括号将某些部分看成一个整体，临时使用，后续不再用")])]),t._v(" "),s("li",[s("p",[t._v("可以通过?:不保存分组， (?:正则表达式)")])])]),t._v(" "),s("h3",{attrs:{id:"正则运算符的优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则运算符的优先级"}},[t._v("#")]),t._v(" 正则运算符的优先级")]),t._v(" "),s("ol",[s("li",[t._v("正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。")]),t._v(" "),s("li",[t._v("相同优先级的会从左到右进行运算，不同优先级的运算先高后低。")])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("高"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("低\n\\ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 转义符\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 圆括号和方括号\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 量词限定符\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \\任何元字符、任何字符 \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 替换，"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"或"')]),t._v("操作\n")])])]),s("h3",{attrs:{id:"正则的特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则的特性"}},[t._v("#")]),t._v(" 正则的特性")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("贪婪性")]),t._v(" "),s("blockquote",[s("p",[t._v("所谓的贪婪性就是正则在捕获时，每一次会尽可能多的去捕获符合条件的内容。\n如果我们想尽可能的少的去捕获符合条件的字符串的话，可以在量词元字符后加?")])])]),t._v(" "),s("li",[s("p",[t._v("懒惰性")]),t._v(" "),s("blockquote",[s("p",[t._v("懒惰性则是正则在成功捕获一次后不管后边的字符串有没有符合条件的都不再捕获。\n如果想捕获目标中所有符合条件的字符串的话，我们可以用标识符g来标明是全局捕获")])])])]),t._v(" "),s("h2",{attrs:{id:"和正则相关的一些方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和正则相关的一些方法"}},[t._v("#")]),t._v(" 和正则相关的一些方法")]),t._v(" "),s("p",[t._v("test、exec、match、replace")]),t._v(" "),s("p",[t._v("▲reg.test(str)验证字符串是否符合正则，符合返回true，否则false")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\w+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),s("p",[t._v("▲reg.exec(str)用来捕获符合规则的字符串")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc123cba456aaa789'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//  ["123", index: 3, input: "abc123cba456aaa789"];')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lastIndex : 0 ")]),t._v("\n\nreg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exec捕获的数组中 \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [0:"123",index:3,input:"abc123cba456aaa789"]')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),t._v(" 表示我们捕获到的字符串\nindex"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" 表示捕获开始位置的索引\ninput 表示原有的字符串\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当我们用exec进行捕获时，如果正则没有加'g'标识符，则exec捕获的每次都是同一个，当正则中有'g'标识符时 捕获的结果就不一样了。")]),t._v("\nlastIndex ：这个属性记录的就是下一次捕获从哪个索引开始。\n当未开始捕获时，这个值为"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("。          \n如果当前次捕获结果为"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("。那么lastIndex的值会被修改为"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.")]),t._v("下次从头开始捕获。\n而且这个lastIndex属性还支持人为赋值。\n")])])]),s("p",[t._v("▲str.match(reg)如果匹配成功，就返回匹配成功的数组，如果匹配不成功，就返回null。")]),t._v(" "),s("p",[t._v("当全局匹配时，match方法会一次性把符合匹配条件的字符串全部捕获到数组中,\n如果想用exec来达到同样的效果需要执行多次exec方法。")]),t._v(" "),s("p",[t._v("▲str.replace()正则去匹配字符串，匹配成功的字符去替换成新的字符串。")]),t._v(" "),s("p",[t._v("写法：str.replace(reg,newStr);")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" engStr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a123b456c789d'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" reg1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\d+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resStr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" engStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fff'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'结果'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("resStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//afffbfffcfffd")]),t._v("\n")])])]),s("h2",{attrs:{id:"零宽断言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#零宽断言"}},[t._v("#")]),t._v(" 零宽断言")]),t._v(" "),s("p",[t._v("用于查找在某些内容(但并不包括这些内容)之前或之后的东西，如\\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("零宽度正预测先行断言 (?=exp)")]),t._v(" "),s("p",[t._v("(?=exp) 这个简单理解就是说字符出现的"),s("strong",[t._v("位置的右边")]),t._v("必须匹配到exp这个表达式。")])]),t._v(" "),s("li",[s("p",[t._v("零宽度负预测先行断言 (?!exp)")]),t._v(" "),s("p",[t._v("(?!exp) 这个就是说字符出现的"),s("strong",[t._v("位置的右边")]),t._v("不能是exp这个表达式。")])]),t._v(" "),s("li",[s("p",[t._v("零宽度正回顾后发断言 (?<=exp)")]),t._v(" "),s("p",[t._v("(?<=exp) 这个就是说字符出现的"),s("strong",[t._v("位置的前边")]),t._v("是exp这个表达式。")])]),t._v(" "),s("li",[s("p",[t._v("零宽度负回顾后发断言 (?<!exp)")]),t._v(" "),s("p",[t._v("(?<!exp) 这个就是说字符出现的"),s("strong",[t._v("位置的前边")]),t._v("不能是exp这个表达式。")])])]),t._v(" "),s("p",[t._v("案例")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a{abc}b{def}c{fff}d'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=\\{)\\w+(?=\\})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"思维导图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#思维导图"}},[t._v("#")]),t._v(" 思维导图")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/assets/img/reg.png"),alt:"foo"}})])}),[],!1,null,null,null);a.default=e.exports}}]);