(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{382:function(t,a,e){"use strict";e.r(a);var v=e(28),s=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("h3",{attrs:{id:"创建仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建仓库"}},[t._v("#")]),t._v(" 创建仓库")]),t._v(" "),e("p",[t._v("创建一个空目录，windows目录名包括父目录最好不要包含中文。")]),t._v(" "),e("h3",{attrs:{id:"将目录变成git管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将目录变成git管理"}},[t._v("#")]),t._v(" 将目录变成Git管理")]),t._v(" "),e("p",[e("strong",[t._v("git init")])]),t._v(" "),e("p",[t._v("当前目录下多了一个"),e("code",[t._v(".git")]),t._v("的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。")]),t._v(" "),e("h3",{attrs:{id:"将文件添加到仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将文件添加到仓库"}},[t._v("#")]),t._v(" 将文件添加到仓库")]),t._v(" "),e("p",[t._v("1.文件放在仓库目录下(子目录也行)")]),t._v(" "),e("p",[t._v("2.git add 文件名  //添加到仓库，没有消息就是好消息")]),t._v(" "),e("p",[t._v('3.git commit -m "info"//把文件提交到仓库 参数'),e("code",[t._v("-m")]),t._v("后输入的是本次提交的说明。")]),t._v(" "),e("p",[e("code",[t._v("git commit")]),t._v("命令执行成功后会告诉你，"),e("code",[t._v("1 file changed")]),t._v("：1个文件被改动（我们新添加的文件）；"),e("code",[t._v("2 insertions")]),t._v("：插入了几行内容。")]),t._v(" "),e("h3",{attrs:{id:"git-status"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-status"}},[t._v("#")]),t._v(" git status")]),t._v(" "),e("p",[t._v("可以让我们时刻掌握仓库当前的状态，哪个文件有无被修改等。")]),t._v(" "),e("h3",{attrs:{id:"git-diff"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-diff"}},[t._v("#")]),t._v(" git diff")]),t._v(" "),e("p",[t._v("git diff 文件名")]),t._v(" "),e("p",[t._v("查看different，能看看具体修改了什么内容。")]),t._v(" "),e("h3",{attrs:{id:"git-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-log"}},[t._v("#")]),t._v(" git log")]),t._v(" "),e("p",[t._v("查看历史记录，显示从最近到最远的提交日志。")]),t._v(" "),e("h4",{attrs:{id:"参数-pretty-oneline以版本号显示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数-pretty-oneline以版本号显示"}},[t._v("#")]),t._v(" 参数--pretty=oneline以版本号显示")]),t._v(" "),e("h3",{attrs:{id:"git表示版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git表示版本"}},[t._v("#")]),t._v(" git表示版本")]),t._v(" "),e("p",[t._v("在Git中，用"),e("code",[t._v("HEAD")]),t._v("表示当前版本，上一个版本就是"),e("code",[t._v("HEAD^")]),t._v("，上上一个版本就是"),e("code",[t._v("HEAD^^")]),t._v("，当然往上100个版本写100个"),e("code",[t._v("^")]),t._v("比较容易数不过来，所以写成"),e("code",[t._v("HEAD~100")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"git-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),e("p",[t._v("回退版本")]),t._v(" "),e("p",[t._v("git reset --hard HEAD^ //回退至上一个版本")]),t._v(" "),e("p",[t._v("git reset --hard 版本号 //回退至准确的版本，版本号写前几位就可以了")]),t._v(" "),e("h3",{attrs:{id:"git-reflog"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-reflog"}},[t._v("#")]),t._v(" git reflog")]),t._v(" "),e("p",[t._v("记录每一次命令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reflog\ne475afc HEAD@{1}: reset: moving to HEAD^\n1094adb (HEAD -> master) HEAD@{2}: commit: append GPL\ne475afc HEAD@{3}: commit: add distributed\neaadf4e HEAD@{4}: commit (initial): wrote a readme file\n")])])]),e("h3",{attrs:{id:"工作区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区"}},[t._v("#")]),t._v(" 工作区")]),t._v(" "),e("p",[t._v("就是在电脑里能看到的目录。")]),t._v(" "),e("h3",{attrs:{id:"暂存区stage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存区stage"}},[t._v("#")]),t._v(" 暂存区stage")]),t._v(" "),e("p",[t._v("在git的版本库(工作区中的.git)中。")]),t._v(" "),e("p",[t._v("把文件往Git版本库里添加的时候，是分两步执行的：")]),t._v(" "),e("p",[t._v("第一步是用"),e("code",[t._v("git add")]),t._v("把文件添加进去，实际上就是把文件修改添加到暂存区；")]),t._v(" "),e("p",[t._v("第二步是用"),e("code",[t._v("git commit")]),t._v("提交更改，实际上就是把暂存区的所有内容提交到当前分支。")]),t._v(" "),e("h3",{attrs:{id:"git-checkout-文件名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-checkout-文件名"}},[t._v("#")]),t._v(" git checkout -- 文件名")]),t._v(" "),e("p",[t._v("把文件在工作区的修改全部撤销，这里有两种情况：")]),t._v(" "),e("p",[t._v("一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；")]),t._v(" "),e("p",[e("strong",[t._v("直接git checkout -- 文件名")])]),t._v(" "),e("p",[t._v("一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。")]),t._v(" "),e("p",[t._v("1."),e("strong",[t._v("git reset HEAD  文件名")])]),t._v(" "),e("p",[t._v("可以把暂存区的修改撤销掉，重新放回工作区")]),t._v(" "),e("p",[t._v("2."),e("strong",[t._v("再进行git checkout -- 文件名")])]),t._v(" "),e("p",[t._v("总之，就是让这个文件回到最近一次"),e("code",[t._v("git commit")]),t._v("或"),e("code",[t._v("git add")]),t._v("时的状态。")]),t._v(" "),e("h3",{attrs:{id:"删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),e("p",[t._v("版本库删除文件")]),t._v(" "),e("p",[t._v("1.git rm 文件名")]),t._v(" "),e("p",[t._v("2.git commit")]),t._v(" "),e("p",[t._v("删错了就git checkout --文件名")]),t._v(" "),e("h3",{attrs:{id:"远程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程库"}},[t._v("#")]),t._v(" 远程库")]),t._v(" "),e("p",[t._v("由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：")]),t._v(" "),e("p",[t._v("第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有"),e("code",[t._v("id_rsa")]),t._v("和"),e("code",[t._v("id_rsa.pub")]),t._v("这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ ssh-keygen -t rsa -C "youremail@example.com"\n')])])]),e("p",[t._v("把邮件地址换成你自己的邮件地址，然后一路回车")]),t._v(" "),e("p",[t._v("如果一切顺利的话，可以在用户主目录里找到"),e("code",[t._v(".ssh")]),t._v("目录，里面有"),e("code",[t._v("id_rsa")]),t._v("和"),e("code",[t._v("id_rsa.pub")]),t._v("两个文件，这两个就是SSH Key的秘钥对，"),e("code",[t._v("id_rsa")]),t._v("是私钥，不能泄露出去，"),e("code",[t._v("id_rsa.pub")]),t._v("是公钥，可以放心地告诉任何人。")]),t._v(" "),e("p",[t._v("第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：")]),t._v(" "),e("p",[t._v("然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴"),e("code",[t._v("id_rsa.pub")]),t._v("文件的内容：")]),t._v(" "),e("p",[t._v("点“Add Key”，你就应该看到已经添加的Key")]),t._v(" "),e("h4",{attrs:{id:"关联库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关联库"}},[t._v("#")]),t._v(" 关联库")]),t._v(" "),e("p",[t._v("在本地仓库下运行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git remote add origin git@github.com:michaelliao/learngit.git\n")])])]),e("p",[t._v("添加后，远程库的名字就是"),e("code",[t._v("origin")]),t._v("，这是Git默认的叫法")]),t._v(" "),e("h4",{attrs:{id:"推送内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送内容"}},[t._v("#")]),t._v(" 推送内容")]),t._v(" "),e("p",[t._v("把本地库的内容推送到远程，用"),e("strong",[t._v("git push")]),t._v("命令，实际上是把当前分支"),e("code",[t._v("master")]),t._v("推送到远程。")]),t._v(" "),e("p",[t._v("由于远程库是空的，第一次推送"),e("code",[t._v("master")]),t._v("分支时，加上"),e("code",[t._v("-u")]),t._v("参数，Git不但会把本地的"),e("code",[t._v("master")]),t._v("分支内容推送的远程新的"),e("code",[t._v("master")]),t._v("分支，还会把本地的"),e("code",[t._v("master")]),t._v("分支和远程的"),e("code",[t._v("master")]),t._v("分支关联起来，")]),t._v(" "),e("h4",{attrs:{id:"删除远程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除远程库"}},[t._v("#")]),t._v(" 删除远程库")]),t._v(" "),e("p",[t._v("git remote rm name")]),t._v(" "),e("p",[t._v("此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。")]),t._v(" "),e("h4",{attrs:{id:"从远程库克隆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从远程库克隆"}},[t._v("#")]),t._v(" 从远程库克隆")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone git@github.com:username/file.git\n")])])]),e("h3",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),e("h4",{attrs:{id:"查看分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看分支"}},[t._v("#")]),t._v(" 查看分支")]),t._v(" "),e("p",[t._v("git branch")]),t._v(" "),e("p",[t._v("命令会列出所有分支，当前分支前面会标一个"),e("code",[t._v("*")]),t._v("号。")]),t._v(" "),e("h4",{attrs:{id:"创建并切换到分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建并切换到分支"}},[t._v("#")]),t._v(" 创建并切换到分支")]),t._v(" "),e("p",[t._v("git checkout -b name")]),t._v(" "),e("p",[e("code",[t._v("git checkout")]),t._v("命令加上"),e("code",[t._v("-b")]),t._v("参数表示创建并切换，相当于以下两条命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch dev\n$ git checkout dev\nSwitched to branch 'dev'\n")])])]),e("h4",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),e("p",[t._v("git merge name")]),t._v(" "),e("p",[t._v("合并指定分支到当前分支。")]),t._v(" "),e("h4",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("p",[t._v("git branch -d name")]),t._v(" "),e("p",[t._v("因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在"),e("code",[t._v("master")]),t._v("分支上工作效果是一样的，但过程更安全。")]),t._v(" "),e("h4",{attrs:{id:"切换分支-新版"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切换分支-新版"}},[t._v("#")]),t._v(" 切换分支(新版)")]),t._v(" "),e("p",[t._v("最新版本的Git提供了新的"),e("code",[t._v("git switch")]),t._v("命令来切换分支：")]),t._v(" "),e("p",[t._v("创建并切换到新的"),e("code",[t._v("dev")]),t._v("分支，可以使用：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git switch -c dev\n")])])]),e("p",[t._v("直接切换到已有的"),e("code",[t._v("master")]),t._v("分支，可以使用：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git switch master\n")])])]),e("h3",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),e("h4",{attrs:{id:"创建标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建标签"}},[t._v("#")]),t._v(" 创建标签")]),t._v(" "),e("p",[t._v("切换到需要打标签的分支上：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch\n* dev\n  master\n$ git checkout master\nSwitched to branch 'master'\n")])])]),e("p",[t._v("然后，敲命令"),e("code",[t._v("git tag name")]),t._v("就可以打一个新标签：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag v1.0\n")])])]),e("p",[t._v("默认标签是打在最新提交的commit上的。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag v0.9 f52c633 //对对应的提交打标签，使用commit id确认\n")])])]),e("p",[t._v("可以用命令"),e("code",[t._v("git tag")]),t._v("查看所有标签，")]),t._v(" "),e("p",[t._v("标签不是按时间顺序列出，而是按字母排序的。")]),t._v(" "),e("h4",{attrs:{id:"操作标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作标签"}},[t._v("#")]),t._v(" 操作标签")]),t._v(" "),e("h5",{attrs:{id:"删除本地标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除本地标签"}},[t._v("#")]),t._v(" 删除本地标签")]),t._v(" "),e("p",[t._v("git tag -d v0.1 //v0.1标签被删除")]),t._v(" "),e("h5",{attrs:{id:"删除远程标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除远程标签"}},[t._v("#")]),t._v(" 删除远程标签")]),t._v(" "),e("p",[t._v("先从本地删除：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git tag -d v0.9\nDeleted tag 'v0.9' (was f52c633)\n")])])]),e("p",[t._v("然后，从远程删除。删除命令也是push，但是格式如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git push origin :refs/tags/v0.9\nTo github.com:michaelliao/learngit.git\n - [deleted]         v0.9\n")])])]),e("h5",{attrs:{id:"推送标签到远程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送标签到远程"}},[t._v("#")]),t._v(" 推送标签到远程")]),t._v(" "),e("p",[t._v("git push origin tagname")]),t._v(" "),e("p",[t._v("一次性推送全部尚未推送到远程的本地标签")]),t._v(" "),e("p",[t._v("git push origin --tags")])])}),[],!1,null,null,null);a.default=s.exports}}]);